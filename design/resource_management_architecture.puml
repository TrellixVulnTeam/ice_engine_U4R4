@startuml

'class Image
'class Audio
'class Model

interface "IResourceLoader<T>" as IResourceLoader_t
{
    + std::unique_ptr<T> load(const std::string& name, const std::string& filename)
    + bool supported(const std::string& filename) const
}

interface "IResourceImporter<T>" as IResourceImporter_t
{
    + std::unique_ptr<T> import(const std::string& name, const std::string& filename)
    + bool supported(const std::string& filename) const
}

interface "IResourceLoader<Model>" as IResourceLoader_Image extends IResourceLoader_t
interface "IResourceLoader<Audio>" as IResourceLoader_Audio extends IResourceLoader_t
interface "IResourceLoader<Model>" as IResourceLoader_Model extends IResourceLoader_t

interface "IResourceImporter<Image>" as IResourceImporter_Image extends IResourceImporter_t
interface "IResourceImporter<Audio>" as IResourceImporter_Audio extends IResourceImporter_t
interface "IResourceImporter<Model>" as IResourceImporter_Model extends IResourceImporter_t

class "ResourceManager<T>" as ResourceManager_t
{
    - std::unique_ptr<IResourceLoader<T>> loader_
'    - IResourceImporter<T>* importer_
    - std::unordered_map<std::string, std::unique_ptr<IResourceImporter<T>>> importers_
    - std::unordered_map<std::string, std::unique_ptr<T>> map_
    - mutable std::recursive_mutex mutex_

    + T* import(const std::string& name, const std::string& filename, const std::string& importer = "")
    + T* load(const std::string& name, const std::string& filename)
    + void destroy(const std::string& name)
    + void destroy(const T* resource)
    + void destroyAll()
    + bool exists(const std::string& name) const
    + T* get(const std::string& name) const
}

class "ResourceManager<Image>" as ResourceManager_Image extends ResourceManager_t
class "ResourceManager<Audio>" as ResourceManager_Audio extends ResourceManager_t
class "ResourceManager<Model>" as ResourceManager_Model extends ResourceManager_t

'class "EngineResourceCache<T>" as EngineResourceCache_t
'{
'    - std::unordered_map<std::string, T> map_
'    - std::mutex mutex_
'
'    + void add(const std::string& name, const T& resource)
'    + void remove(const std::string& name)
'    + void removeAll()
'    + bool exists(const std::string& name) const
'    + const T& get(const std::string& name) const
'    + const std::unordered_map<std::string, T>& map() const
'}

'class MeshHandle

class "EngineResourceManager<T>" as EngineResourceManager_t
{
    - std::unordered_map<std::string, T> map_
    - mutable std::recursive_mutex mutex_

    + const T& create(const std::string& name, const Args& ...)
    + void destroy(const std::string& name)
    + void destroy(const T& resource)
    + void destroyAll()
    + bool exists(const std::string& name) const
    + const T& get(const std::string& name) const
}

class "EngineResourceManager<MeshHandle>" as EngineResourceManager_MeshHandle extends EngineResourceManager_t

@enduml